;; Copyright 2019 Matthew Egan Odendahl
;; SPDX-License-Identifier: Apache-2.0

(hissp.basic.._macro_.from-require
 (hissp.basic deftype let cascade if-else progn))

(deftype TestBasic (unittest..TestCase)
  test_let
  (lambda (self)
    (let (x 1
          y 2)
      (.assertEqual self x 1)
      (.assertEqual self y 2)))

  test_cascade
  (lambda (self)
    (.assertEqual self
                  (cascade []
                           (.append 1)
                           (.extend [2,3]))
                  [1,2,3]))

  test_if-else
  (lambda (self)
    (.assertEqual self (if-else False :yes :no) :no)
    (.assertEqual self (if-else True :yes :no) :yes)
    (let (xs [])
      (if-else False
               (.append xs :yes)
               (.append xs :no))
      (if-else True
               (.append xs :yes)
               (.append xs :no))
      (.assertEqual self xs [':no',':yes'])))

  test_progn
  (lambda (self)
    (.assertEqual self
                  (let (xs [])
                    (progn
                      (.append xs 1)
                      (.extend xs "bc")
                      xs))
                  [1,'b','c']))

  test_string_newline
  (lambda (self)
    (.assertEqual self
                  "\
foo\
bar\nbaz"
                  "foobar
baz")
    (.assertEqual self
                  "

foo
bar
"
                  "\n\nfoo\nbar\n"))

  test_string_reader_macro
  (lambda (self)
    (.assertEqual self
                  fractions..Fraction\ "1/3"
                  .\ (fractions..Fraction 1 3))))
