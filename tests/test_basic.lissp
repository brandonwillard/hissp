;; Copyright 2019 Matthew Egan Odendahl
;; SPDX-License-Identifier: Apache-2.0

(hissp.basic.._macro_.from-require
 (hissp.basic define let cascade if-else progn))

(define TestBasic
    (type 'TestBasic `(,unittest..TestCase)
          (dict :
                test_let
                (lambda (self)
                  (let (x 1
                        y 2)
                    (.assertEqual self x 1)
                    (.assertEqual self y 2)))

                test_cascade
                (lambda (self)
                  (.assertEqual self
                                (cascade []
                                         (.append 1)
                                         (.extend [2,3]))
                                [1,2,3]))

                test_if-else
                (lambda (self)
                  (.assertEqual self (if-else False :yes :no) :no)
                  (.assertEqual self (if-else True :yes :no) :yes)
                  (let (x [])
                    (if-else False
                             (.append x :yes)
                             (.append x :no))
                    (if-else True
                             (.append x :yes)
                             (.append x :no))
                    (.assertEqual self x [':no',':yes'])))

                test_progn
                (lambda (self)
                  (.assertEqual self
                                (let (x [])
                                  (progn
                                    (.append x 1)
                                    (.extend x "bc")
                                    x))
                                [1,'b','c'])))))
